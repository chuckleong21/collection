---
title: "tester"
format: html
editor: visual
execute: 
  echo: false
---

```{r}
#| label: global dependencies
#| message: false
#| warning: false
library(shiny)
library(shiny.fluent)
box::use(app/logic/collection[collection])
Collection <- collection("database")
movie <- Collection$data$movie
book  <- Collection$data$book
music <- Collection$data$music
game  <- Collection$data$game
```

```{r}
#| label: record dialog
#| message: false
box::use(
  app/view/modal
)

set.seed(100)
movie_record <- movie |>
  dplyr::filter(stringr::str_count(region, "\\s") >= 1) |>
  dplyr::slice_sample(n = 1)
book_record <- book |>
  dplyr::slice_sample(n = 1)
music_record <- music |>
  dplyr::slice_sample(n = 1)
game_record <- game |>
  dplyr::slice_sample(n = 1)

button_ui <- function(id) {
  ns <- NS(id)
  DefaultButton.shinyInput(ns("showDialog"), text = "Show Dialog")
}

button_server <- function(id) {
  moduleServer(id, function(input, output, session) {
    reactive(input$showDialog)
  })
}

ui <- function(id) {
  ns <- NS(id)
  div(
    button_ui(ns("btn")),
    modal$ui(ns("dialog"))
  )
}

server <- function(id) {
  moduleServer(id, function(input, output, session) {
    isDialogOpen <- reactiveVal(FALSE)
    cover <- reactiveVal(NULL)
    
    buttonMod <- button_server("btn")
    dialogInputs <- modal$server("dialog", 
                                 data = movie_record, 
                                 isOpen = isDialogOpen, 
                                 coverPath = cover)
    
    observeEvent(buttonMod(), {
      isDialogOpen(TRUE)
    })
    
    observeEvent(dialogInputs$dismiss(), {
      isDialogOpen(FALSE)
    })
    observeEvent(dialogInputs$update(), {
      isDialogOpen(FALSE)
    })
    observeEvent(dialogInputs$cancel(), {
      isDialogOpen(FALSE)
    })
  })
}

if (interactive()) {
  shinyApp(ui("app"), function(input, output) server("app"))
}
```

```{r}
#| label: heatmap
#| message: false
box::use(app/view/heatmap[heatmap])
heatmap(Collection)
```

```{r}
#| label: search bar
#| message: false
box::use(app/view/search_bar)

logo <- div(
  class = "logo", 
  tags$svg(
    width = "50", height = "50", 
    viewBox = "0 0 50 50", fill = "none",
    xmlns="http://www.w3.org/2000/svg",
    tags$rect(width = "48", height = "48", fill="none"),
    tags$path(class = "rotate-1", d = "M26 6C26 3.79086 27.7909 2 30 2H42C44.2091 2 46 3.79086 46 6V18C46 20.2091 44.2091 22 42 22H30C27.7909 22 26 20.2091 26 18V6Z"),
    tags$rect(class = "rotate-2", x = "2", y = "2", width = "20", height = "20", rx = "4"),
    tags$rect(class = "rotate-3", x = "2", y = "28", width = "20", height = "20", rx = "4"),
    tags$rect(class = "rotate-4", x = "26", y = "28", width = "20", height = "20", rx = "4")
  )
)

ui <- function(id, title = "Title") {
  ns <- NS(id)
  tagList(
    tags$head(
      tags$link(rel = "stylesheet", 
                type = "text/css",
                href = "../app/static/css/app.min.css")
    ),
    div(
      class = "header", 
      logo, 
      div(class = "title", Text(variant = "xLarge", title)),
      search_bar$ui(ns("searchBar"))
    )
  )
}

server <- function(id) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns
    
    search_bar$server("searchBar")
  })
}

shinyApp(ui("header"), function(input, output) server("header"))

```
